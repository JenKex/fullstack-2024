import React, { useState, useEffect } from "react"
import { useNavigate } from "react-router-dom"
import { Channel } from "../data/interfaces.js"
// import { channels } from "../../backendSrc/data/content.js"
import { ChannelListItem } from "../data/components/ChannelListItem.js"

const Home: React.FC = () => {

  const LS_KEY = 'JWT_TOKEN'
  // let chatrooms: string[] = []
  let [channelState, setChannelState] = useState<Channel[]>([])
  let [chatroomState, setChatroomState] = useState<string[]>([])
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false)
  const [currentUser, setCurrentUser] =  useState<string>('')


  // Tanke bakom den h칛r funktionen:
  // 1: En tom lista skapas.
  // 2: Funktionen kollar om det finns en anv칛ndare inloggad.
  // 3: Om det finns en anv칛ndare, fetcha meddelandena f칬r denna anv칛ndare.
  // 4: G친 igenom listan och kolla om anv칛ndaren skickar eller f친r meddelandet.
  // 5: Om anv칛ndaren f친r meddelandet, l칛gg till den som skickar; om anv칛ndaren skickar meddelandet, l칛gg till den som f친r.
  // 6: Inkludera ej dubletter.
  // PROBLEM: Beh칬ver skriva om s친 att JWT-Verify k칬rs p친 token, men vill inte ha en dedikerad get/protected utan h칛mta ifr친n get/:id -- detta betyder dock att verify beh칬ver k칬ras ifr친n frontend f칬r att parsea ut anv칛ndaren fr친n JWT-token.
  // PROBLEM: Server-h칛mtning funkar inte -- k칬r ifr친n h친rdkodad data f칬r att testa funktionen.

  // PROBLEM: Kan f칬rhindra dubbelrendering med useRef, en bool, variabel eller liknande f칬r att se till att funktionen inte f칬rs칬ker ladda tv친 g친nger och h칛mta data som f친r den att parsea fel data, men f칬rs칬ker g칬ra best practices och initialisera klient+h칛mta samlingar ist칛llet. Skriver om detta 2024-11-01, och implementerar d친 ocks친 JWT-verifiering. 

  async function renderChannels(): Promise<void>{
    let channels: Channel[] = []
    let x: number = 0
    const response: Response | null = await fetch('/api/channels/')
    if (response.ok){
      const data = await response.json()
      console.log('Home.tsx, renderChannels, useEffect', data)
      for (let i = 0; i < data.length; i++) {
        channels[x] = data[i]
        x++
      }
    }
    setChannelState(channels)
  }

  async function renderChatrooms(): Promise<void> {
    let chatrooms: string[] = []
    let x: number = 0
    const token = localStorage.getItem(LS_KEY)
    if (token) {
      setIsLoggedIn(true)
      const loggedInUser = localStorage.getItem('username') || ''
      setCurrentUser(loggedInUser)
      console.log(loggedInUser)
      const response: Response | null = await fetch(`/api/direct-messages/${loggedInUser}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization' : token ? token : ''
        }
      })
      if (response.ok) {
        const data = await response.json()
        console.log('Home.tsx, renderChatrooms, useEffect', data)
        for (let i = 0; i < data.length; i++) {
          if (loggedInUser === data[i].sendingUser) {
            if (chatrooms.includes(data[i].receivingUser)) {

            }
            else {
              chatrooms[x] = data[i].receivingUser
              x++
            }
          }
          else if (loggedInUser === data[i].receivingUser) {
            if (chatrooms.includes(data[i].sendingUser)) {

            }
            else {
              chatrooms[x] = data[i].sendingUser
              x++
            }
          }
        }
        setChatroomState(chatrooms)
      }
    }
    else{
      return
    }
  }

  useEffect(() => {
      renderChannels()
      renderChatrooms()
  }, [])

  const navigate = useNavigate()

  function logOut() {
    localStorage.removeItem(LS_KEY)
    localStorage.removeItem('username')
    setChatroomState([])
    setIsLoggedIn(false)
  }

  return (
    <div className="display">
      <header>

        {isLoggedIn ?
        <div>
        <h2>Welcome, {currentUser}</h2>
          <button onClick={() => logOut()}>Log out</button>
          </div> :
          <div>
          <h2>Welcome, guest</h2>
          <button onClick={() => navigate('/login')}>Log in</button>
          </div>
        }
      </header>
      <main>
        <nav>
          <ul> <b>Channels</b>
            {channelState.map((channel) => (
              <ChannelListItem key={channel.name} {...channel}></ChannelListItem>
            ))}
          </ul>
          <ul> {isLoggedIn ? <b>Users</b> : <b>No DMs detected. Log in to chat!</b>}
            {chatroomState.map((username) => (
              <li onClick={() => navigate(`/chatroom/${username}`)} key={username}>{username}</li>
            ))}
          </ul>
        </nav>
        <div className="front-page-blurb">V칛lkommen till SolarStorm! Tr칛ffa dina polare, snacka i allm칛nhet, och njut av erat goda h칛ng! 游땕
        </div>
      </main>
    </div>
  )
}

export default Home